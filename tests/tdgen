#!/usr/bin/env python3
#
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Antti Laakso <antti.laakso@linux.intel.com>

"""Test data generator, for collecting and creating data used for testing."""

import os
import sys
import logging
from pathlib import Path
from pepclibs.msr import EnergyPerfBias, FSBFreq, HWPRequest, HWPRequestPkg, MiscFeatureControl
from pepclibs.msr import PlatformInfo, PowerCtl, PCStateConfigCtl, PMEnable, TurboRatioLimit
from pepclibs.msr import TurboRatioLimit1
from pepclibs.helperlibs import ArgParse, Logging, ProcessManager, YAML
from pepclibs.helperlibs.Exceptions import Error

OWN_NAME = "tdgen"
VERSION = "0.1"
LOG = logging.getLogger()
Logging.setup_logger(prefix=OWN_NAME)

CPUInfoData = {
    "commands" : [
        {"command": "lscpu --physical --all -p=socket,node,core,cpu,online",
         "dirname": "lscpu-topology"},
        {"command": "lscpu",
         "dirname": "lscpu"}],
    "inlinefiles" : [
        # Command for reading following files:
        # * /sys/devices/system/cpu/cpu*/topology/die_id
        # * /sys/devices/system/cpu/cpu*/topology/die_cpus_list
        {"command": r"find /sys/devices/system/cpu -type f -regextype posix-extended -regex " \
                    r"'.*cpu([[:digit:]]+)/topology/die_(id|cpus_list)' -type f -exec printf " \
                    r"'%s' {}: \; -exec grep . {} \;",
         "separator": ":",
         "readonly":  True,
         "dirname":   "die-info",
         "filename":  "die.txt"}],
    "msrs" :
        {"addresses": [
            EnergyPerfBias.MSR_ENERGY_PERF_BIAS,
            FSBFreq.MSR_FSB_FREQ,
            HWPRequest.MSR_HWP_REQUEST,
            HWPRequestPkg.MSR_HWP_REQUEST_PKG,
            MiscFeatureControl.MSR_MISC_FEATURE_CONTROL,
            PlatformInfo.MSR_PLATFORM_INFO,
            PowerCtl.MSR_POWER_CTL,
            PCStateConfigCtl.MSR_PKG_CST_CONFIG_CONTROL,
            PMEnable.MSR_PM_ENABLE,
            TurboRatioLimit.MSR_TURBO_RATIO_LIMIT,
            TurboRatioLimit1.MSR_TURBO_RATIO_LIMIT1,
            TurboRatioLimit1.MSR_TURBO_GROUP_CORECNT,
            TurboRatioLimit1.MSR_TURBO_RATIO_LIMIT_CORES],
         "separator1": ":",
         "separator2": "|",
         "dirname":   "msr",
         "filename":  "msr.txt"}
    }

ASPMData = {
    "inlinefiles" : [
        {"command": r"find /sys/module/pcie_aspm/parameters/policy -type f -exec printf '%s' {}: " \
                    r"\; -exec grep . {} \;",
         "separator": ":",
         "readonly":  False,
         "dirname":   "aspm-info",
         "filename":  "aspm.txt"}]
    }

CPUOnlineData = {
    "inlinefiles" : [
        {"command": r"find /sys/devices/system/cpu -type f -regextype posix-extended -regex " \
                    r"'.*cpu([[:digit:]]+)/online' -exec printf '%s' {}: \; -exec grep . {} \;",
         "separator": ":",
         "readonly":  False,
         "dirname":   "cpuonline-info",
         "filename":  "cpuonline.txt"}]
    }

CStatesData = {
    "inlinefiles" : [
        {"command": r"find '/sys/devices/system/cpu' -type f -regextype posix-extended -regex " \
                    r"'.*cpu([[:digit:]]+)/cpuidle/state([[:digit:]]+)/[^/]+' -exec printf '%s' " \
                    r"{}: \; -exec grep . {} \;",
         "separator": ":",
         "readonly": False,
         "dirname": "cstates",
         "filename": "cstates.txt"}]
    }

PStatesData = {
    "inlinefiles" : [
        {"command": r"find '/sys/devices/system/cpu' -type f -regextype posix-extended -regex " \
                    r"'.*policy([[:digit:]]+)/[^/]+' -exec printf '%s' {}: \; -exec grep . {} \;",
         "separator": ":",
         "readonly": False,
         "dirname": "pstates",
         "filename": "pstates.txt"},
        {"command" : r"find '/sys/devices/system/cpu/intel_pstate/' -type f -exec printf '%s' " \
                     r"{}: \; -exec grep . {} \;",
         "separator": ":",
         "readonly": False,
         "dirname": "pstates",
         "filename": "intel_pstates.txt"}]
    }

SystemctlData = {
    "commands" : [
        {"command": "systemctl is-active -- 'tuned'",
         "dirname": "systemctl-tuned-active",
         "ignore_exitcode": True}],
    }

MODULE_TESTDATA = {
    "CPUInfo" : CPUInfoData,
    "ASPM" : ASPMData,
    "CPUOnline" : CPUOnlineData,
    "CStates" : CStatesData,
    "PStates" : PStatesData,
    "Systemctl" : SystemctlData,
    }

def build_arguments_parser():
    """A helper function which parses the input arguments."""

    text = f"{OWN_NAME} - Test data generator, for collecting and creating test data."
    parser = ArgParse.SSHOptsAwareArgsParser(description=text, prog=OWN_NAME, ver=VERSION)

    ArgParse.add_ssh_options(parser)

    text = """Path to the directory to store the output of the commands at. Default value is the
              name of the host the command is run on. See the '-H' option."""
    parser.add_argument("-o", "--outdir", type=Path, default=None, help=text)

    return parser

def parse_arguments():
    """Parse input arguments."""

    parser = build_arguments_parser()
    args = parser.parse_args()

    return args

def collect_cmd_output(cmdinfo, pman, outdir):
    """
    Run the command defined in 'cmdinfo' and save the output to a file. The arguments are as
    follows.
      * cmdinfo - a dictionary of a command to run, see 'MODULE_TESTDATA'.
      * pman - the process manager object that defines the remote host to run the 'cmdinfo' on.
      * outdir - the directory to save the command output to.
    """

    datapath = outdir / cmdinfo["dirname"]
    os.makedirs(datapath, exist_ok=True)

    res = pman.run(cmdinfo["command"])
    if res.exitcode != 0 and not cmdinfo.get("ignore_exitcode"):
        LOG.error("running command '%s' failed and returned '%s'", cmdinfo["command"], res.exitcode)

    for fname, data in ("stdout", res.stdout), ("stderr", res.stderr):
        path = datapath / f"{fname}.txt"

        with open(path, "w") as fobj:
            fobj.write(data)

def collect_files(cmdinfo, pman, outdir):
    """
    Read the content of files by running the command defined in 'cmdinfo' and save the output to a
    file. The arguments are as follows.
      * cmdinfo - a dictionary of a command to run to collect the file contents, see
                  'MODULE_TESTDATA'.
      * pman - the process manager object that defines the remote host to read the files from.
      * outdir - the directory to save the output to.
    """

    cmdpath = outdir / cmdinfo["dirname"]
    os.makedirs(cmdpath, exist_ok=True)

    stdout, _ = pman.run_verify(cmdinfo["command"])

    path = cmdpath / cmdinfo["filename"]
    with open(path, "w") as fobj:
        fobj.write(stdout)

def collect_msrs(msrinfo, pman, outdir):
    """
    Read the values of the MSR registers defined in 'msrinfo' and save the output to a file. The
    arguments are as follows.
      * msrinfo - a dictionary of a MSR registers to read, see 'MODULE_TESTDATA'.
      * pman - the process manager object that defines the remote host to read the MSR values from.
      * outdir - the directory to save the command output to.
    """

    lines, _ = pman.run_verify("lscpu -p=cpu", join=False)

    cpus = []
    for line in lines:
        if line.startswith("#"):
            continue

        cpu = int(line.strip())
        cpus.append(cpu)

    cmdpath = outdir / msrinfo["dirname"]
    os.makedirs(cmdpath, exist_ok=True)

    path = cmdpath / msrinfo["filename"]
    with open(path, "w+") as fobj:
        for cpu in cpus:
            line = f"/dev/cpu/{cpu}/msr{msrinfo['separator1']}"

            for addr in msrinfo["addresses"]:
                result = pman.run(f"rdmsr {addr} -p {cpu}")
                if result.exitcode != 0:
                    continue

                value = result.stdout.strip()
                line += f"{addr}{msrinfo['separator2']}{value} "

            fobj.write(line + "\n")

def generate_config_file(modname, testdata, outdir):
    """Generate configuration file for python module name 'modname' from testdata 'testdata'."""

    with open(outdir / f"{modname}.yaml", "w") as fobj:
        fobj.write(f"# This file was generated by the '{OWN_NAME}' tool.\n")
        YAML.dump(testdata, fobj)

def main():
    """Script entry point."""

    try:
        args = parse_arguments()

        # pylint: disable=no-member
        if args.hostname == "localhost":
            args.username = args.privkey = args.timeout = None

        with ProcessManager.get_pman(args.hostname, username=args.username,
                                     privkeypath=args.privkey, timeout=args.timeout) as pman:
            outdir = args.outdir
            if not outdir:
                outdir = Path(pman.hostname)

            for modname, testdata in MODULE_TESTDATA.items():
                datapath = outdir / modname

                if "commands" in testdata:
                    for cmdinfo in testdata["commands"]:
                        collect_cmd_output(cmdinfo, pman, datapath)
                        cmdinfo["dirname"] = f"{modname}/{cmdinfo['dirname']}"

                if "inlinefiles" in testdata:
                    for cmdinfo in testdata["inlinefiles"]:
                        collect_files(cmdinfo, pman, datapath)
                        cmdinfo["dirname"] = f"{modname}/{cmdinfo['dirname']}"
                        # We do not need command used to collect file contents, remove it.
                        del cmdinfo["command"]

                if "msrs" in testdata:
                    collect_msrs(testdata["msrs"], pman, datapath)
                    testdata["msrs"]["dirname"] = f"{modname}/{testdata['msrs']['dirname']}"

                generate_config_file(modname, testdata, outdir)

    except KeyboardInterrupt:
        LOG.info("\nInterrupted, exiting")
        return -1
    except Error as err:
        LOG.error(err)
        return -1

    return 0

if __name__ == "__main__":
    sys.exit(main())

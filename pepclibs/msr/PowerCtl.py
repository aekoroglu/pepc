# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si
#
# Copyright (C) 2020-2021 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#
# Authors: Antti Laakso <antti.laakso@linux.intel.com>
#          Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

"""
This module provides API to MSR 0x1FC (MSR_POWER_CTL). This is a model-specific register found on
many Intel platforms.
"""

import logging
from pepclibs import CPUInfo
from pepclibs.msr import _FeaturedMSR
from pepclibs.helperlibs.Exceptions import ErrorNotSupported

_LOG = logging.getLogger()

# The Power Control Model Specific Register.
MSR_POWER_CTL = 0x1FC
C1E_ENABLE = 1
CSTATE_PREWAKE_DISABLE = 30

# Description of CPU features controlled by the the Power Control MSR.
#
# Note 1: consider using the 'PowerCtl.features' dicionary instead of this one.
# Note 2, the "scope" names have to be the same as "level" names in 'CPUInfo'.
FEATURES = {
    "cstate_prewake" : {
        "name" : "C-state prewake",
        "enabled" : 0,
        "bitnr" : CSTATE_PREWAKE_DISABLE,
        "cpumodels" : [CPUInfo.INTEL_FAM6_ICELAKE_X, CPUInfo.INTEL_FAM6_ICELAKE_D],
        "choices" : ["on", "off"],
        "scope": "package",
        "help" : f"""When enabled, the CPU will start exiting the C6 idle state in advance, prior to
                     the next local APIC timer event. This CPU feature is controlled by MSR
                     {MSR_POWER_CTL:#x}, bit {CSTATE_PREWAKE_DISABLE}.""",
    },
    "c1e_autopromote" : {
        "name" : "C1E autopromote",
        "enabled" : 1,
        "bitnr" : C1E_ENABLE,
        "choices" : ["on", "off"],
        "scope": "package",
        "help" : f"""When enabled, the CPU automatically converts all C1 requests to C1E requests.
                     This CPU feature is controlled by MSR {MSR_POWER_CTL:#x}, bit {C1E_ENABLE}.""",
    },
}

class PowerCtl(_FeaturedMSR.FeaturedMSR):
    """
    This class provides API to MSR 0x1FC (MSR_POWER_CTL). This is a model-specific register found on
    many Intel platforms.
    """

    def _set_baseclass_attributes(self):
        """Set the attributes the superclass requires."""

        self.features = FEATURES
        self.msr_addr = MSR_POWER_CTL
        self.msr_name = "MSR_POWER_CTL"

    def __init__(self, proc=None, cpuinfo=None, lscpu_info=None, msr=None):
        """
        The class constructor. The argument are as follows.
          * proc - the 'Proc' or 'SSH' object that defines the host to run the measurements on.
          * cpuinfo - CPU information object generated by 'CPUInfo.CPUInfo()'.
          * lscpu_info - CPU information generated by 'CPUInfo.get_lscpu_info()'.
          * msr - the 'MSR.MSR()' object to use for writing to the MSR register.
        """

        super().__init__(proc=proc, cpuinfo=cpuinfo, lscpu_info=lscpu_info, msr=msr)
